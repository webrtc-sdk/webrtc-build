diff --git a/modules/audio_device/android/audio_manager.cc b/modules/audio_device/android/audio_manager.cc
index 0b55496619..4fedd79167 100644
--- a/modules/audio_device/android/audio_manager.cc
+++ b/modules/audio_device/android/audio_manager.cc
@@ -74,7 +74,7 @@ AudioManager::AudioManager()
       {"nativeCacheAudioParameters", "(IIIZZZZZZZIIJ)V",
        reinterpret_cast<void*>(&webrtc::AudioManager::CacheAudioParameters)}};
   j_native_registration_ = j_environment_->RegisterNatives(
-      "org/webrtc/voiceengine/WebRtcAudioManager", native_methods,
+      "livekit/org/webrtc/voiceengine/WebRtcAudioManager", native_methods,
       arraysize(native_methods));
   j_audio_manager_.reset(
       new JavaAudioManager(j_native_registration_.get(),
diff --git a/modules/audio_device/android/audio_record_jni.cc b/modules/audio_device/android/audio_record_jni.cc
index 919eabb983..012891ca14 100644
--- a/modules/audio_device/android/audio_record_jni.cc
+++ b/modules/audio_device/android/audio_record_jni.cc
@@ -102,7 +102,7 @@ AudioRecordJni::AudioRecordJni(AudioManager* audio_manager)
       {"nativeDataIsRecorded", "(IJ)V",
        reinterpret_cast<void*>(&webrtc::AudioRecordJni::DataIsRecorded)}};
   j_native_registration_ = j_environment_->RegisterNatives(
-      "org/webrtc/voiceengine/WebRtcAudioRecord", native_methods,
+      "livekit/org/webrtc/voiceengine/WebRtcAudioRecord", native_methods,
       arraysize(native_methods));
   j_audio_record_.reset(
       new JavaAudioRecord(j_native_registration_.get(),
diff --git a/modules/audio_device/android/audio_track_jni.cc b/modules/audio_device/android/audio_track_jni.cc
index 5afa1ec252..5a3b1396c9 100644
--- a/modules/audio_device/android/audio_track_jni.cc
+++ b/modules/audio_device/android/audio_track_jni.cc
@@ -112,7 +112,7 @@ AudioTrackJni::AudioTrackJni(AudioManager* audio_manager)
       {"nativeGetPlayoutData", "(IJ)V",
        reinterpret_cast<void*>(&webrtc::AudioTrackJni::GetPlayoutData)}};
   j_native_registration_ = j_environment_->RegisterNatives(
-      "org/webrtc/voiceengine/WebRtcAudioTrack", native_methods,
+      "livekit/org/webrtc/voiceengine/WebRtcAudioTrack", native_methods,
       arraysize(native_methods));
   j_audio_track_.reset(
       new JavaAudioTrack(j_native_registration_.get(),
diff --git a/modules/audio_device/android/build_info.cc b/modules/audio_device/android/build_info.cc
index 916be8244e..f5164f1470 100644
--- a/modules/audio_device/android/build_info.cc
+++ b/modules/audio_device/android/build_info.cc
@@ -17,7 +17,7 @@ namespace webrtc {
 BuildInfo::BuildInfo()
     : j_environment_(JVM::GetInstance()->environment()),
       j_build_info_(
-          JVM::GetInstance()->GetClass("org/webrtc/voiceengine/BuildInfo")) {}
+          JVM::GetInstance()->GetClass("livekit/org/webrtc/voiceengine/BuildInfo")) {}
 
 std::string BuildInfo::GetStringFromJava(const char* name) {
   jmethodID id = j_build_info_.GetStaticMethodId(name, "()Ljava/lang/String;");
diff --git a/modules/utility/source/jvm_android.cc b/modules/utility/source/jvm_android.cc
index ee9930bcaa..5c9e14b45c 100644
--- a/modules/utility/source/jvm_android.cc
+++ b/modules/utility/source/jvm_android.cc
@@ -27,10 +27,10 @@ struct {
   const char* name;
   jclass clazz;
 } loaded_classes[] = {
-    {"org/webrtc/voiceengine/BuildInfo", nullptr},
-    {"org/webrtc/voiceengine/WebRtcAudioManager", nullptr},
-    {"org/webrtc/voiceengine/WebRtcAudioRecord", nullptr},
-    {"org/webrtc/voiceengine/WebRtcAudioTrack", nullptr},
+    {"livekit/org/webrtc/voiceengine/BuildInfo", nullptr},
+    {"livekit/org/webrtc/voiceengine/WebRtcAudioManager", nullptr},
+    {"livekit/org/webrtc/voiceengine/WebRtcAudioRecord", nullptr},
+    {"livekit/org/webrtc/voiceengine/WebRtcAudioTrack", nullptr},
 };
 
 // Android's FindClass() is trickier than usual because the app-specific
diff --git a/modules/video_coding/codecs/test/android_codec_factory_helper.cc b/modules/video_coding/codecs/test/android_codec_factory_helper.cc
index d1be684cbb..812c3eb5dc 100644
--- a/modules/video_coding/codecs/test/android_codec_factory_helper.cc
+++ b/modules/video_coding/codecs/test/android_codec_factory_helper.cc
@@ -51,9 +51,9 @@ void InitializeAndroidObjects() {
 std::unique_ptr<VideoEncoderFactory> CreateAndroidEncoderFactory() {
   JNIEnv* env = AttachCurrentThreadIfNeeded();
   ScopedJavaLocalRef<jclass> factory_class =
-      GetClass(env, "org/webrtc/HardwareVideoEncoderFactory");
+      GetClass(env, "livekit/org/webrtc/HardwareVideoEncoderFactory");
   jmethodID factory_constructor = env->GetMethodID(
-      factory_class.obj(), "<init>", "(Lorg/webrtc/EglBase$Context;ZZ)V");
+      factory_class.obj(), "<init>", "(Llivekit/org/webrtc/EglBase$Context;ZZ)V");
   ScopedJavaLocalRef<jobject> factory_object(
       env, env->NewObject(factory_class.obj(), factory_constructor,
                           nullptr /* shared_context */,
@@ -65,9 +65,9 @@ std::unique_ptr<VideoEncoderFactory> CreateAndroidEncoderFactory() {
 std::unique_ptr<VideoDecoderFactory> CreateAndroidDecoderFactory() {
   JNIEnv* env = AttachCurrentThreadIfNeeded();
   ScopedJavaLocalRef<jclass> factory_class =
-      GetClass(env, "org/webrtc/HardwareVideoDecoderFactory");
+      GetClass(env, "livekit/org/webrtc/HardwareVideoDecoderFactory");
   jmethodID factory_constructor = env->GetMethodID(
-      factory_class.obj(), "<init>", "(Lorg/webrtc/EglBase$Context;)V");
+      factory_class.obj(), "<init>", "(Llivekit/org/webrtc/EglBase$Context;)V");
   ScopedJavaLocalRef<jobject> factory_object(
       env, env->NewObject(factory_class.obj(), factory_constructor,
                           nullptr /* shared_context */));
diff --git a/sdk/android/BUILD.gn b/sdk/android/BUILD.gn
index 494b43f6d3..1a63c66558 100644
--- a/sdk/android/BUILD.gn
+++ b/sdk/android/BUILD.gn
@@ -1308,6 +1308,7 @@ if (current_os == "linux" || is_android) {
     sources = [ "api/org/webrtc/Metrics.java" ]
     namespace = "webrtc::jni"
     jni_generator_include = "//sdk/android/src/jni/jni_generator_helper.h"
+    package_prefix = android_package_prefix
   }
 
   # Generated JNI for public JNI targets, matching order of targets
@@ -1322,6 +1323,7 @@ if (current_os == "linux" || is_android) {
     ]
     namespace = "webrtc::jni"
     jni_generator_include = "//sdk/android/src/jni/jni_generator_helper.h"
+    package_prefix = android_package_prefix
   }
 
   generate_jni("generated_video_jni") {
@@ -1352,12 +1354,14 @@ if (current_os == "linux" || is_android) {
     ]
     namespace = "webrtc::jni"
     jni_generator_include = "//sdk/android/src/jni/jni_generator_helper.h"
+    package_prefix = android_package_prefix
   }
 
   generate_jni("generated_video_egl_jni") {
     sources = [ "src/java/org/webrtc/EglBase10Impl.java" ]
     namespace = "webrtc::jni"
     jni_generator_include = "//sdk/android/src/jni/jni_generator_helper.h"
+    package_prefix = android_package_prefix
   }
 
   generate_jni("generated_libvpx_vp8_jni") {
@@ -1368,6 +1372,7 @@ if (current_os == "linux" || is_android) {
 
     namespace = "webrtc::jni"
     jni_generator_include = "//sdk/android/src/jni/jni_generator_helper.h"
+    package_prefix = android_package_prefix
   }
 
   generate_jni("generated_libvpx_vp9_jni") {
@@ -1378,6 +1383,7 @@ if (current_os == "linux" || is_android) {
 
     namespace = "webrtc::jni"
     jni_generator_include = "//sdk/android/src/jni/jni_generator_helper.h"
+    package_prefix = android_package_prefix
   }
 
   generate_jni("generated_libaom_av1_encoder_jni") {
@@ -1385,6 +1391,7 @@ if (current_os == "linux" || is_android) {
 
     namespace = "webrtc::jni"
     jni_generator_include = "//sdk/android/src/jni/jni_generator_helper.h"
+    package_prefix = android_package_prefix
   }
 
   generate_jni("generated_dav1d_jni") {
@@ -1392,6 +1399,7 @@ if (current_os == "linux" || is_android) {
 
     namespace = "webrtc::jni"
     jni_generator_include = "//sdk/android/src/jni/jni_generator_helper.h"
+    package_prefix = android_package_prefix
   }
 
   generate_jni("generated_swcodecs_jni") {
@@ -1402,6 +1410,7 @@ if (current_os == "linux" || is_android) {
 
     namespace = "webrtc::jni"
     jni_generator_include = "//sdk/android/src/jni/jni_generator_helper.h"
+    package_prefix = android_package_prefix
   }
 
   generate_jni("generated_peerconnection_jni") {
@@ -1443,12 +1452,14 @@ if (current_os == "linux" || is_android) {
     ]
     namespace = "webrtc::jni"
     jni_generator_include = "//sdk/android/src/jni/jni_generator_helper.h"
+    package_prefix = android_package_prefix
   }
 
   generate_jni("generated_java_audio_jni") {
     sources = [ "api/org/webrtc/audio/JavaAudioDeviceModule.java" ]
     namespace = "webrtc::jni"
     jni_generator_include = "//sdk/android/src/jni/jni_generator_helper.h"
+    package_prefix = android_package_prefix
   }
 
   generate_jni("generated_builtin_audio_codecs_jni") {
@@ -1458,6 +1469,7 @@ if (current_os == "linux" || is_android) {
     ]
     namespace = "webrtc::jni"
     jni_generator_include = "//sdk/android/src/jni/jni_generator_helper.h"
+    package_prefix = android_package_prefix
   }
 
   # Generated JNI for native API targets
@@ -1469,6 +1481,7 @@ if (current_os == "linux" || is_android) {
     ]
     namespace = "webrtc::jni"
     jni_generator_include = "//sdk/android/src/jni/jni_generator_helper.h"
+    package_prefix = android_package_prefix
   }
 
   # Generated JNI for internal targets.
@@ -1476,12 +1489,14 @@ if (current_os == "linux" || is_android) {
   generate_jni("generated_logging_jni") {
     sources = [ "src/java/org/webrtc/JNILogging.java" ]
     jni_generator_include = "//sdk/android/src/jni/jni_generator_helper.h"
+    package_prefix = android_package_prefix
   }
 
   generate_jni("generated_audio_device_module_base_jni") {
     sources = [ "src/java/org/webrtc/audio/WebRtcAudioManager.java" ]
     namespace = "webrtc::jni"
     jni_generator_include = "//sdk/android/src/jni/jni_generator_helper.h"
+    package_prefix = android_package_prefix
   }
 
   generate_jni("generated_java_audio_device_module_native_jni") {
@@ -1491,6 +1506,7 @@ if (current_os == "linux" || is_android) {
     ]
     namespace = "webrtc::jni"
     jni_generator_include = "//sdk/android/src/jni/jni_generator_helper.h"
+    package_prefix = android_package_prefix
   }
 }
 
diff --git a/sdk/android/api/org/webrtc/PeerConnectionFactory.java b/sdk/android/api/org/webrtc/PeerConnectionFactory.java
index 1817d41beb..1c7bfbf480 100644
--- a/sdk/android/api/org/webrtc/PeerConnectionFactory.java
+++ b/sdk/android/api/org/webrtc/PeerConnectionFactory.java
@@ -89,7 +89,7 @@ public class PeerConnectionFactory {
       private String fieldTrials = "";
       private boolean enableInternalTracer;
       private NativeLibraryLoader nativeLibraryLoader = new NativeLibrary.DefaultLoader();
-      private String nativeLibraryName = "jingle_peerconnection_so";
+      private String nativeLibraryName = "lkjingle_peerconnection_so";
       @Nullable private Loggable loggable;
       @Nullable private Severity loggableSeverity;
 
diff --git a/sdk/android/src/jni/jni_helpers.h b/sdk/android/src/jni/jni_helpers.h
index 4e5781027a..5d17a87c50 100644
--- a/sdk/android/src/jni/jni_helpers.h
+++ b/sdk/android/src/jni/jni_helpers.h
@@ -30,10 +30,10 @@
 // boundary. crbug.com/655248
 #define JNI_FUNCTION_DECLARATION(rettype, name, ...)                    \
   __attribute__((force_align_arg_pointer)) extern "C" JNIEXPORT rettype \
-      JNICALL Java_org_webrtc_##name(__VA_ARGS__)
+      JNICALL Java_livekit_org_webrtc_##name(__VA_ARGS__)
 #else
 #define JNI_FUNCTION_DECLARATION(rettype, name, ...) \
-  extern "C" JNIEXPORT rettype JNICALL Java_org_webrtc_##name(__VA_ARGS__)
+  extern "C" JNIEXPORT rettype JNICALL Java_livekit_org_webrtc_##name(__VA_ARGS__)
 #endif
 
 namespace webrtc {
diff --git a/sdk/android/src/jni/simulcast_video_encoder.cc b/sdk/android/src/jni/simulcast_video_encoder.cc
index da31fbbfa5..a9385d8b6c 100644
--- a/sdk/android/src/jni/simulcast_video_encoder.cc
+++ b/sdk/android/src/jni/simulcast_video_encoder.cc
@@ -15,7 +15,13 @@ extern "C" {
 #endif
 
 // (VideoEncoderFactory primary, VideoEncoderFactory fallback, VideoCodecInfo info)
-JNIEXPORT jlong JNICALL Java_org_webrtc_SimulcastVideoEncoder_nativeCreateEncoder(JNIEnv *env, jclass klass, jobject primary, jobject fallback, jobject info) {
+JNI_FUNCTION_DECLARATION(jlong,
+                         SimulcastVideoEncoder_nativeCreateEncoder,
+                         JNIEnv *env,
+                         jclass klass,
+                         jobject primary,
+                         jobject fallback,
+                         jobject info) {
     RTC_LOG(LS_INFO) << "Create simulcast video encoder";
     JavaParamRef<jobject> info_ref(info);
     SdpVideoFormat format = VideoCodecInfoToSdpVideoFormat(env, info_ref);
diff --git a/tools_webrtc/android/build_aar.py b/tools_webrtc/android/build_aar.py
index d910b39a7c..d0e970cfaa 100755
--- a/tools_webrtc/android/build_aar.py
+++ b/tools_webrtc/android/build_aar.py
@@ -250,7 +250,7 @@ def BuildAar(archs,
       Collect(aar_file, build_dir, arch, unstripped)
 
   license_dir = os.path.dirname(os.path.realpath(output_file))
-  GenerateLicenses(license_dir, build_dir, archs)
+  #GenerateLicenses(license_dir, build_dir, archs)
 
   if not ext_build_dir:
     shutil.rmtree(build_dir, True)
diff --git a/webrtc.gni b/webrtc.gni
index 5e4a5d3c81..c9cb039432 100644
--- a/webrtc.gni
+++ b/webrtc.gni
@@ -240,6 +240,11 @@ declare_args() {
   #  "warn": RTC_LOGs a message with LS_WARNING severity if the field trial
   #          hasn't been registered.
   rtc_strict_field_trials = ""
+
+  if (is_android) {
+    android_package_prefix = "livekit"
+  }
+
 }
 
 if (!build_with_mozilla) {
diff --git a/base/android/jni_generator/jni_generator.py b/base/android/jni_generator/jni_generator.py
index b739c86d1..028932256 100755
--- a/base/android/jni_generator/jni_generator.py
+++ b/base/android/jni_generator/jni_generator.py
@@ -333,6 +333,7 @@ class JniParams(object):
   def __init__(self, fully_qualified_class):
     self._fully_qualified_class = 'L' + fully_qualified_class
     self._package = '/'.join(fully_qualified_class.split('/')[:-1])
+    print("JNI Params: %s, %s" % (self._fully_qualified_class, self._package))
     self._imports = []
     self._inner_classes = []
     self._implicit_imports = []
@@ -392,6 +393,7 @@ class JniParams(object):
     if param in pod_param_map:
       return prefix + pod_param_map[param]
     if '/' in param:
+      print("using param directly: %s" % param)
       # Coming from javap, use the fully qualified param directly.
       return prefix + 'L' + param + ';'
 
@@ -414,6 +416,10 @@ class JniParams(object):
               'Inner class (%s) can not be imported '
               'and used by JNI (%s). Please import the outer '
               'class and use Outer.Inner instead.' % (qualified_name, param))
+        print("import: %s" % qualified_name)
+
+        if qualified_name.startswith('Lorg/webrtc'):
+          return prefix + qualified_name.replace('Lorg/webrtc', 'Llivekit/org/webrtc', 1) + ';'
         return prefix + qualified_name + ';'
 
     # Is it an inner class from an outer class import? (e.g. referencing
@@ -424,6 +430,9 @@ class JniParams(object):
       inner = components[-1]
       for qualified_name in self._imports:
         if qualified_name.endswith('/' + outer):
+          print("outer import: %s" % qualified_name)
+          if qualified_name.startswith('Lorg/webrtc'):
+            return (prefix + qualified_name.replace('Lorg/webrtc', 'Llivekit/org/webrtc', 1) + '$' + inner + ';')
           return (prefix + qualified_name + '$' + inner + ';')
       raise SyntaxError('Inner class (%s) can not be '
                         'used directly by JNI. Please import the outer '
@@ -433,6 +442,7 @@ class JniParams(object):
 
     self._CheckImplicitImports(param)
 
+    print("type not found: using: %s" % param)
     # Type not found, falling back to same package as this class.
     return (prefix + 'L' + self._package + '/' + param + ';')
 
@@ -471,6 +481,7 @@ class JniParams(object):
     items += [self.JavaToJni(param.datatype) for param in params]
     items += [')']
     items += [self.JavaToJni(returns)]
+    print('"java sig: {}"'.format(''.join(items)))
     return '"{}"'.format(''.join(items))
 
   @staticmethod
@@ -480,6 +491,7 @@ class JniParams(object):
     if index == -1:
       prefix = 'descriptor: '
       index = signature_line.index(prefix)
+    print('"signature: %s"' % signature_line[index + len(prefix):])
     return '"%s"' % signature_line[index + len(prefix):]
 
   @staticmethod
@@ -573,6 +585,11 @@ def EscapeClassName(fully_qualified_class):
   escaped = fully_qualified_class.replace('_', '_1')
   return escaped.replace('/', '_').replace('$', '_00024')
 
+def RemovePrefixClassName(class_name, package_prefix):
+  if package_prefix:
+    if class_name.startswith(package_prefix + "/"):
+        return class_name[len(package_prefix + "/"):]
+  return class_name
 
 def GetRegistrationFunctionName(fully_qualified_class):
   """Returns the register name with a given class."""
@@ -1121,7 +1138,7 @@ const char kClassPath_${JAVA_CLASS}[] = \
     class_getter = """\
 #ifndef ${JAVA_CLASS}_clazz_defined
 #define ${JAVA_CLASS}_clazz_defined
-inline jclass ${JAVA_CLASS}_clazz(JNIEnv* env) {
+inline jclass ${ORIGINAL_CLASS}_clazz(JNIEnv* env) {
   return base::android::LazyGetClass(env, kClassPath_${JAVA_CLASS}, \
 ${MAYBE_SPLIT_NAME_ARG}&g_${JAVA_CLASS}_clazz);
 }
@@ -1141,6 +1158,8 @@ JNI_REGISTRATION_EXPORT std::atomic<jclass> g_${JAVA_CLASS}_clazz(nullptr);
       values = {
           'JAVA_CLASS':
           EscapeClassName(full_clazz),
+          'ORIGINAL_CLASS':
+          EscapeClassName(RemovePrefixClassName(full_clazz, self.package_prefix)),
           'MAYBE_SPLIT_NAME_ARG':
           (('"%s", ' % self.split_name) if self.split_name else '')
       }
@@ -1461,6 +1480,7 @@ ${PROFILING_ENTERED_NATIVE}\
     return {
         'JAVA_CLASS_ONLY': java_class_only,
         'JAVA_CLASS': EscapeClassName(java_class),
+        'ORIGINAL_CLASS': EscapeClassName(RemovePrefixClassName(java_class, self.options.package_prefix)),
         'RETURN_TYPE': return_type,
         'OPTIONAL_ERROR_RETURN': optional_error_return,
         'RETURN_DECLARATION': return_declaration,
@@ -1495,9 +1515,9 @@ ${FUNCTION_SIGNATURE} {""")
     template = Template("""
 static std::atomic<jmethodID> g_${JAVA_CLASS}_${METHOD_ID_VAR_NAME}(nullptr);
 ${FUNCTION_HEADER}
-  jclass clazz = ${JAVA_CLASS}_clazz(env);
+  jclass clazz = ${ORIGINAL_CLASS}_clazz(env);
   CHECK_CLAZZ(env, ${FIRST_PARAM_IN_CALL},
-      ${JAVA_CLASS}_clazz(env)${OPTIONAL_ERROR_RETURN});
+      ${ORIGINAL_CLASS}_clazz(env)${OPTIONAL_ERROR_RETURN});
 
   jni_generator::JniJavaCallContext${CHECK_EXCEPTION} call_context;
   call_context.Init<
@@ -1697,6 +1717,14 @@ See SampleForTests.java for more details.
     build_utils.Touch(args.stamp)
     sys.exit(0)
 
+  if args.package_prefix:
+    print('Package Prefix found!', args.package_prefix)
+  else:
+    print('no package prefix')
+
+  if args.enable_jni_multiplexing:
+    print('jni multiplexing')
+
   if output_names:
     # Remove existing headers so that moving .java source files but not updating
     # the corresponding C++ include will be a compile failure (otherwise
diff --git a/build/config/android/rules.gni b/build/config/android/rules.gni
index a3eccbff7..96ceb74ad 100644
--- a/build/config/android/rules.gni
+++ b/build/config/android/rules.gni
@@ -163,6 +163,7 @@ if (enable_java_templates) {
                              TESTONLY_AND_VISIBILITY + [
                                    "deps",
                                    "public_deps",
+                                   "package_prefix",
                                  ])
       if (!defined(public_deps)) {
         public_deps = []
@@ -183,6 +184,13 @@ if (enable_java_templates) {
         rebase_path(_jni_generator_include, _jni_output_dir),
       ]
 
+      if(defined(package_prefix)) {
+        args += [
+          "--package_prefix",
+          package_prefix
+        ]
+      }
+
       if (defined(invoker.classes)) {
         if (is_robolectric) {
           not_needed(invoker, [ "jar_file" ])
@@ -291,6 +299,7 @@ if (enable_java_templates) {
   #   sources: list of .java files to generate jni for
   #   namespace: Specify the namespace for the generated header file.
   #   deps, public_deps: As normal
+  #   package_prefix: package prefix to add to jni
   #
   # Example
   #   # Target located in base/BUILD.gn.
